{"version":3,"sources":["Redux/dialogsReducer.ts","components/FormControls/FormControls.jsx","assets/images/images.jfif","assets/images/Pulse-1s-200px.svg","assets/images/haha.jpg","serviceWorker.js","DAL/api.js","Redux/profileReducer.ts","Redux/sitebarReducer.ts","Redux/usersReducer.ts","Redux/authReducer.ts","Redux/appReducer.ts","Redux/redux-store.js","components/Navbar/Navbar.jsx","components/Users/Users.js","components/preloader/preloader.jsx","Redux/usersSelectors.js","components/Users/UsersContainer.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/FormLogin.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","App.js","hoc/withSuspense.js","index.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","utillits/validators/validators.js","components/FormControls/FormControls.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Users/users.module.css"],"names":["inititalState","dialogs","id","name","messages","message","addNewMessageBodyActionCreator","newMessageBody","type","dialogsReducer","state","action","newMessage","FormConrol","input","meta","props","child","hasError","touched","error","className","styles","formController","children","Textarea","restProps","Input","createField","placeholder","validators","component","text","validate","module","exports","Boolean","window","location","hostname","match","instance","axios","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","resultCode","delete","profileAPI","status","put","file","formData","FormData","append","profile","loginAPI","email","password","rememberMe","captcha","securityAPI","initialState","posts","likesCount","newPostText","newPostTesx","setUserProfileSuccess","setStatus","setUserProfile","dispatch","a","profileReducer","newPost","newPostBody","photos","filter","p","postId","friends","src","sidebarReducer","users","totalUsersCount","isFetching","followingInProgress","followingProgress","followSuccess","unFollowSuccess","setCurrentPageSuccess","setToggleIsFetching","usersReducer","map","user","userID","followed","count","isAuth","login","captchaURL","authReducer","payload","setAuthUsersData","setCaptchaUrl","getAuthUsersData","getCaptchaURL","errorMessage","length","stopSubmit","_error","url","initialized","appReducer","reducers","combineReducers","dialogsPage","profilePage","sidebar","usersPage","auth","app","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","__store__","Navbar","s","nav","item","activeClassName","active","to","Users","pages","i","push","selectedPAge","onClick","e","onPageChanged","key","alt","small","userPhoto","photo","disabled","some","unfollow","follow","Preloader","preloader","getUsers","createSelector","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","setUsers","this","totalUsersCOunt","totalUserCount","unFollow","React","Component","connect","items","totalCount","ProfileStatusWithHooks","console","log","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataReduxForm","reduxForm","handleSubmit","onSubmit","style","formSummaryError","Object","keys","contacts","contact","ProfileData","goToEditMode","isOwner","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","descriptionBlock","profilePhoto","large","usePhoto","changeAvatar","target","files","savePhoto","profileInfo","initialValues","saveProfile","Post","post_img","like","maxLength10","maxLengthCreator","MyPosts","memo","postsElements","postsBlock","AddMessageReduxForm","values","addPost","Field","required","formBtn","MyPostsContainer","addPostActionCreator","Profile","mainProfile","ProfileContainer","params","ownUserId","history","getUserStatus","refreshProfile","prevProps","prevState","snapshot","getState","Promise","reject","withRouter","Header","header","left","loginBlock","logout","Button","variant","color","href","HeaderContainer","LoginReduxForm","DialogsContainer","lazy","App","promiseRejectionEvent","alert","initializeApp","addEventListener","catchAllUnhandledError","removeEventListener","exact","path","render","Suspense","fallback","promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","MaxLength"],"mappings":"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","file":"static/js/main.cec57a34.chunk.js","sourcesContent":["const ADD_NEW_MESSAGE_BODY = \"ADD_NEW_MESSAGE_BODY\";\r\n\r\ntype DialogsType = {\r\n    id : number\r\n    name : string\r\n}\r\ntype MessagesType = {\r\n    id : number\r\n    message : string\r\n}\r\nlet inititalState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Maksim\"},\r\n        {id: 2, name: \"Maks\"},\r\n        {id: 3, name: \"Masha\"},\r\n        {id: 4, name: \"Yo\"},\r\n        {id: 5, name: \"Egor\"}\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"How are you?\"},\r\n        {id: 4, message: \"What are you doing?\"},\r\n        {id: 5, message: \"How much is the fish?\"}\r\n\r\n    ] as Array<MessagesType>,\r\n}\r\nexport type InitialStateType = typeof inititalState;\r\nconst dialogsReducer = (state = inititalState, action: any):InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ADD_NEW_MESSAGE_BODY:\r\n            let newMessage = {\r\n                id: 7,\r\n                message: action.newMessageBody\r\n            };\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\ntype AddNewMessageBodyType = {\r\n    type : typeof ADD_NEW_MESSAGE_BODY\r\n    newMessageBody : string\r\n}\r\nexport const addNewMessageBodyActionCreator = (newMessageBody : string):AddNewMessageBodyType => ({type: ADD_NEW_MESSAGE_BODY, newMessageBody});\r\n\r\nexport default dialogsReducer;\r\n","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormConrol = ({input, meta , child, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={hasError ? styles.formController : \"\"}>\r\n            <div>\r\n                {props.children}\r\n\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta , child, ...restProps} = props;\r\n    return <FormConrol {...props}> <textarea {...input} {...restProps}/> </FormConrol>\r\n};\r\nexport const Input = (props) => {\r\n    const {input, meta , child, ...restProps} = props;\r\n    return <FormConrol {...props}> <input {...input} {...restProps}/> </FormConrol>\r\n};\r\nexport const createField = (placeholder, name, validators, component, props = {}, text=\"\") => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                   validate={validators} component={component}\r\n                   {...props}/>{text}\r\n        </div>\r\n    )\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/images.904467c3.jfif\";","module.exports = __webpack_public_path__ + \"static/media/Pulse-1s-200px.cf5df366.svg\";","module.exports = __webpack_public_path__ + \"static/media/haha.0f81fe99.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as axios from \"axios\";\r\n\r\nconst instance =  axios.create({\r\n    withCredentials : true,\r\n    baseURL : (\"https://social-network.samuraijs.com/api/1.0/\"),\r\n    headers : {\r\n        \"API-KEY\":\"24afe4d5-e911-48f2-ab38-6aea088744f2\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage,pageSize){\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n               return response.data;\r\n            });\r\n    },\r\n    setFollow(userId){\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data.resultCode;\r\n            })\r\n    },\r\n    setUnfollow(userId){\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data.resultCode;\r\n            })\r\n    }\r\n};\r\nexport const profileAPI = {\r\n    getUserProfile(userId){\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response=> {\r\n                return response.data;\r\n            })\r\n    },\r\n    getStatus(userId){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status){\r\n        return instance.put(`profile/status`, {status : status})\r\n    },\r\n    savePhoto(file){\r\n        let formData = new FormData();\r\n        formData.append(\"image\" , file)\r\n        return instance.put(`profile/photo` , formData , {\r\n            headers : {\r\n                \"Content-type\" : \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile){\r\n        return instance.put(`profile`, profile)\r\n    }\r\n};\r\nexport const loginAPI = {\r\n    me(){\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe=false , captcha=null){\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    }\r\n};\r\nexport const securityAPI = {\r\n    getCaptchaUrl(){\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n};","import {profileAPI} from \"../DAL/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/types\";\r\n\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SAVE_PHOTO = \"SAVE_PHOTO\";\r\n\r\nlet initialState = {\r\n    posts : [\r\n\r\n        {id: 5 , message : \"How much is the fish?\" , likesCount : 11}\r\n    ] as Array<PostsType>,\r\n    newPostText : \"heyhey\",\r\n    profile : null as ProfileType | null,\r\n    status : \"\",\r\n    newPostTesx : \"\"\r\n};\r\ntype InitialStateType = typeof initialState;\r\nconst  profileReducer = (state = initialState,action:any):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return{\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile : action.profile\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status : action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO: {\r\n            return {\r\n                ...state, profile : {...state.profile, photos : action.photos} as ProfileType\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, posts : state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\ntype DeletePostType = {\r\n    type : typeof DELETE_POST\r\n    postId : number\r\n};\r\nexport const  deletePost = (postId:number):DeletePostType => ({type : DELETE_POST, postId});\r\ntype AddPostType = {\r\n    type : typeof ADD_POST\r\n    newPostBody : string\r\n};\r\nexport const addPostActionCreator = (newPostBody:string):AddPostType => ({type : ADD_POST, newPostBody});\r\ntype SetUserProfileType = {\r\n    type : typeof SET_USER_PROFILE\r\n    profile : ProfileType\r\n};\r\nconst setUserProfileSuccess = (profile:ProfileType):SetUserProfileType=> ({type : SET_USER_PROFILE, profile});\r\ntype SetStatusType = {\r\n    type : typeof SET_STATUS\r\n    status : string\r\n};\r\nconst setStatus = (status:string):SetStatusType => ({type : SET_STATUS,status});\r\ntype SavePhotosType = {\r\n    type : typeof SAVE_PHOTO\r\n    photos : PhotosType\r\n}\r\nconst savePhotoSuccess = (photos:PhotosType):SavePhotosType => ({type : SAVE_PHOTO,photos});\r\n\r\n\r\nexport const getUserStatus = (userId:number) => async (dispatch:any) =>{\r\n    let response = await profileAPI.getStatus(userId);\r\n            dispatch(setStatus(response.data));\r\n};\r\nexport const updateUserStatus = (status:string) => async (dispatch:any) =>{\r\n    try {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setStatus(status));\r\n        }\r\n    }catch (error) {\r\n        debugger;\r\n    }\r\n    \r\n};\r\nexport const setUserProfile = (userId:number) => async (dispatch:any) => {\r\n    let profile = await profileAPI.getUserProfile(userId);\r\n            dispatch(setUserProfileSuccess(profile));\r\n};\r\nexport const savePhoto = (file:any) => async (dispatch:any) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if(response.data.resultCode === 0){\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n};\r\nexport const saveProfile = (profile:ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.id;\r\n    let response = await profileAPI.saveProfile(profile);\r\n    if(response.data.resultCode === 0){\r\n        dispatch(setUserProfile(userId));\r\n    }else{\r\n        dispatch(stopSubmit(\"edit-profile\", {_error :response.data.messages[0]}));\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n};\r\nexport default profileReducer;\r\n\r\n","import Friends from \"../components/Navbar/Friends/Friends\";\r\nimport React from \"react\";\r\ntype FriendsType = {\r\n    id: number\r\n    src : string\r\n}\r\nlet initialState ={\r\n    friends : [\r\n        {id : 1 , src : \"https://cdn.iconscout.com/icon/premium/png-256-thumb/marvel-1502922-1273137.png\"},\r\n        {id : 1 , src : \"https://66.media.tumblr.com/2baea900172949be0a2c460cfe48fff8/tumblr_p9d3rzjswE1wmrvkdo7_250.png\"},\r\n        {id : 1 , src : \"https://66.media.tumblr.com/b6fdaeba44abe187c44e7b07fc896cbf/tumblr_p9d3rzjswE1wmrvkdo2_r1_250.png\"}\r\n    ] as Array<FriendsType>\r\n};\r\nexport type InitialStateType = typeof initialState;\r\nconst FRIENDS_LIST = \"FRIENDS_LIST\";\r\nconst  sidebarReducer = (state = initialState ,action:any):InitialStateType => {\r\n    switch (action.type) {\r\n        case FRIENDS_LIST:\r\n            // state.friends.map(f => <Friends src={f.src}/>);\r\n            return state;\r\n        default :\r\n            return state;\r\n    }\r\n};\r\ntype FriendsListType = {\r\n    type : typeof FRIENDS_LIST\r\n}\r\nexport const friendsListActionCreator = ():FriendsListType => ({type : FRIENDS_LIST});\r\n\r\nexport default  sidebarReducer;","import {usersAPI} from \"../DAL/api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_USERS_TOTAL_COUNT = \"SET_USERS_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING = \"TOGGLE_IS_FOLLOWING\";\r\n\r\nlet initialState = {\r\n    users : [] as Array<UserType>,\r\n    pageSize : 5,\r\n    totalUsersCount : 0,\r\n    currentPage : 1,\r\n    isFetching : true,\r\n    followingInProgress : [] as Array<number>//Array of users Ids\r\n};\r\ntype InitialStateType = typeof initialState;\r\nconst  usersReducer = (state = initialState,action:any):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {...state,\r\n                users: state.users.map(user=>{\r\n                    if(user.id === action.userID){\r\n                        return {\r\n                            ...user, followed : true\r\n                    }\r\n                    }\r\n                    return user;\r\n                } )};\r\n\r\n        case UNFOLLOW:\r\n            return {...state,\r\n                    users: state.users.map(user=>{\r\n                        if(user.id === action.userID){\r\n                            return {\r\n                                ...user, followed : false\r\n                            }\r\n                        }\r\n                        return user;\r\n                    } )};\r\n        case SET_USERS:\r\n            return {...state, users : action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.count};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n        case TOGGLE_IS_FOLLOWING:\r\n            return {...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress , action.userId]\r\n                    : state.followingInProgress.filter(id=>id !== action.userId)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\ntype FollowingProgressType = {\r\n    type : typeof TOGGLE_IS_FOLLOWING\r\n    isFetching : boolean\r\n    userId : number\r\n};\r\nconst followingProgress = (isFetching : boolean, userId : number):FollowingProgressType => ({type:TOGGLE_IS_FOLLOWING, isFetching, userId});\r\n\r\ntype FollowSuccessType = {\r\n    type : typeof FOLLOW\r\n    userId : number\r\n};\r\nconst followSuccess = (userId : number) : FollowSuccessType => ({type : FOLLOW,  userId});\r\n\r\ntype UnfollowSuccessType = {\r\n    type : typeof UNFOLLOW\r\n    userId : number\r\n};\r\nconst unFollowSuccess = (userId : number):UnfollowSuccessType => ({type : UNFOLLOW, userId});\r\n\r\ntype SetUsersType = {\r\n    type : typeof SET_USERS\r\n    users : Array<UserType>\r\n};\r\nconst setUsersSuccess = (users:Array<UserType>):SetUsersType => ({type : SET_USERS , users});\r\n\r\ntype SetCurrentPageType = {\r\n    type : typeof SET_CURRENT_PAGE\r\n    currentPage : number\r\n};\r\nconst setCurrentPageSuccess = (currentPage: number):SetCurrentPageType => ({type: SET_CURRENT_PAGE, currentPage});\r\n\r\ntype SetUsersTotalCountType = {\r\n    type : typeof  SET_USERS_TOTAL_COUNT\r\n    count : number\r\n};\r\nconst setUsersTotalCount = (totalUsersCount: number) : SetUsersTotalCountType => ({type: SET_USERS_TOTAL_COUNT, count : totalUsersCount});\r\n\r\ntype SetToggleIsFetchingType = {\r\n    type : typeof TOGGLE_IS_FETCHING\r\n    isFetching : boolean\r\n};\r\nconst setToggleIsFetching = (isFetching : boolean):SetToggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching});\r\n\r\n\r\nexport const follow = (userId:number) => async (dispatch:any) => {\r\n    dispatch(followingProgress(true, userId));\r\n    let response = await usersAPI.setFollow(userId);\r\n            if(response===0) {\r\n                dispatch(followSuccess(userId));\r\n            }\r\n            dispatch(followingProgress(false, userId));\r\n};\r\nexport const unFollow = (userId:number) => async (dispatch:any) => {\r\n    dispatch(followingProgress(true, userId));\r\n    let response = await usersAPI.setUnfollow(userId);\r\n            if(response===0) {\r\n                dispatch(unFollowSuccess(userId));\r\n            }\r\n            dispatch(followingProgress(false, userId));\r\n};\r\nexport const setUsers =(currentPage:number, pageSize:number)=> async (dispatch:any) => {\r\n    dispatch(setToggleIsFetching(true));\r\n    debugger;\r\n    let data = await usersAPI.getUsers(currentPage , pageSize);\r\n            dispatch(setToggleIsFetching(false));\r\n            dispatch(setCurrentPageSuccess(currentPage));\r\n            dispatch(setUsersSuccess(data.items));\r\n            dispatch(setUsersTotalCount(data.totalCount));\r\n};\r\nexport default usersReducer;\r\n\r\n","import { stopSubmit } from \"redux-form\";\r\nimport {loginAPI, securityAPI} from \"../DAL/api\";\r\n\r\nconst SET_USERS_DATA = \"SET_USERS_DATA\";\r\nconst SET_CAPTCHA_URL = \"SET_CAPTCHA_URL\";\r\n\r\n\r\nlet initialState  ={\r\n    isAuth: false,\r\n    id : null as number | null,\r\n    login : null as string | null,\r\n    email: null as string | null,\r\n    captchaURL : null as string | null\r\n};\r\nexport type InitialStateType = typeof initialState\r\nconst  authReducer = (state  = initialState ,action : any) : InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_CAPTCHA_URL:\r\n        case SET_USERS_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport default  authReducer;\r\ntype PayloadType = {\r\n    id : number | null\r\n    email : string | null\r\n    login : string | null\r\n    isAuth : boolean | null\r\n\r\n}\r\ntype SetAuthUsersDataType = {\r\n    type : typeof SET_USERS_DATA\r\n    payload : PayloadType\r\n}\r\nconst setAuthUsersData = (id:number | null, email:string | null, login:string | null, isAuth:boolean) :SetAuthUsersDataType => ({type : SET_USERS_DATA,payload:{ id ,email ,login, isAuth}});\r\n\r\ntype SetCaptchaUrlType = {\r\n    type : typeof SET_CAPTCHA_URL\r\n    payload : {captchaURL : string}\r\n}\r\nconst setCaptchaUrl = (captchaURL:string): SetCaptchaUrlType => ({type : SET_CAPTCHA_URL , payload : {captchaURL}});\r\n\r\n\r\nexport const getAuthUsersData = () => async (dispatch : any) => {\r\n    let response = await loginAPI.me();\r\n            if(response.data.resultCode === 0){\r\n                let {id , email , login} = response.data.data;\r\n                dispatch(setAuthUsersData(id , email , login, true))\r\n            }\r\n};\r\nexport const login = (email:string, password:string, rememberMe:boolean , captcha:string) => async (dispatch:any) => {\r\n    let response = await loginAPI.login(email, password, rememberMe , captcha);\r\n            if(response.data.resultCode === 0){\r\n                dispatch(getAuthUsersData())\r\n\r\n            }else{\r\n                if(response.data.resultCode === 10){\r\n                    debugger;\r\n                    dispatch(getCaptchaURL());\r\n                }\r\n                let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"check the correctness of the entered data\"\r\n                dispatch(stopSubmit(\"Login\", {_error : errorMessage }));\r\n            }\r\n};\r\nexport const logout = () => async (dispatch:any) => {\r\n    let response = await loginAPI.logout();\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setAuthUsersData(null,null,null,false))\r\n            }\r\n};\r\n\r\nexport const getCaptchaURL = () => async (dispatch:any) => {\r\n    let response = await securityAPI.getCaptchaUrl();\r\n    let captchaURL = response.data.url;\r\n    dispatch(setCaptchaUrl(captchaURL));\r\n};","\r\nimport {getAuthUsersData} from \"./authReducer\";\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\";\r\nexport type InitialStateType=  {\r\n    initialized : boolean\r\n}\r\nlet initialState: InitialStateType ={\r\n    initialized :false\r\n};\r\nconst  appReducer = (state: InitialStateType = initialState ,action:any):InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport default  appReducer;\r\ntype InitializedSuccesActionType = {\r\n    type : typeof SET_INITIALIZED\r\n}\r\nconst initializedSuccess = () : InitializedSuccesActionType=> ({type : SET_INITIALIZED });\r\nexport const initializeApp = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUsersData());\r\n    Promise.all([promise]).then( ()=>{\r\n            dispatch(initializedSuccess());\r\n    });\r\n};\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport sidebarReducer from \"./sitebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer.ts\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./appReducer.ts\";\r\nlet reducers = combineReducers({\r\n    dialogsPage :  dialogsReducer,\r\n    profilePage: profileReducer ,\r\n    sidebar : sidebarReducer,\r\n    usersPage : usersReducer,\r\n    auth : authReducer,\r\n    app : appReducer,\r\n    form : formReducer\r\n\r\n});\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(thunk)));\r\nwindow.__store__  = store;\r\nexport default store;","import React from 'react'\r\nimport s from \"./Navbar.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = (props) => {\r\n    //Тут можно получить кастомых друзей\r\n\r\n\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/dialogs\">Dialogs</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/users\">Users</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\"\r\nimport userPhoto from \"../../assets/images/images.jfif\";\r\nimport s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Users(props) {\r\n    // let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p && s.selectedPAge}\r\n                                 onClick={(e) => {\r\n                                     props.onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {props.users.map(user => <div key={user.id}>\r\n                <span>\r\n                    <NavLink to={`profile/`+user.id}>\r\n                        <div>\r\n                            <img alt=\"logo\" src={user.photos.small != null ? user.photos.small : userPhoto} className={s.photo}/>\r\n                        </div>\r\n                    </NavLink>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={props.followingInProgress.some(id=>id===user.id)} onClick={() => {\r\n                                props.unfollow(user.id)\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id=>id===user.id)} onClick={() => {\r\n                                props.follow(user.id);\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.city\"}</div>\r\n                        <div>{\"user.location.country\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>)\r\n}\r\n\r\nexport default Users;","import preloader from \"../../assets/images/Pulse-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div>\r\n        <img alt=\"\" src={preloader}/>\r\n    </div>\r\n}\r\nexport default Preloader;","import {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector (getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u=>true);\r\n});\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n};","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setUsers, unFollow, follow\r\n} from \"../../Redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/usersSelectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.setUsers(this.props.currentPage,this.props.pageSize);\r\n\r\n    };\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.setUsers(pageNumber, this.props.pageSize);\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCOunt={this.props.totalUserCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n// let authRedirectComponent = withAuthRedirect(UsersContainer);\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unFollow, setUsers\r\n    })\r\n)(UsersContainer);","import React , {useState, useEffect} from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    console.log(props);\r\n    let [editMode , setEditMode] = useState( false);\r\n    let [status , setStatus] = useState(props.status);\r\n    useEffect( ()=>{\r\n        setStatus(props.status);\r\n    },[props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    };\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return (\r\n            <div>\r\n                <div>\r\n                    {!editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode} >{props.status || `----`}  </span>\r\n                    </div>\r\n                    }\r\n                    {editMode &&\r\n                        <div>\r\n                            <input onChange={onStatusChange} autoFocus={true}\r\n                                   value={status} onBlur={deactivateEditMode}/>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\"\r\nimport {Contact} from \"./ProfileInfo\";\r\nimport {createField, Input ,Textarea} from \"../../FormControls/FormControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../FormControls/FormControls.module.css\"\r\n\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit,profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <div>\r\n                <b> Full Name </b>: {createField(\"Full name\",\"fullname\",[], Input)}\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b> About me :</b>\r\n                {createField(\"About me\",\"aboutMe\",[], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <b>LookingForAJob : </b>\r\n                {createField(\"\",\"lookingForAJob\",[], Input, {type : \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b> My Professional skills :</b>\r\n                {createField(\"My Professional skills\",\"lookingForAJobDescription\",[], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts :</b> {Object.keys(profile.contacts).map( key=>{\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}</b> {createField(key,\"contacts.\" + key,[], Input)}\r\n                    {console.log(key)}\r\n                </div>\r\n            }) }\r\n            </div>\r\n            <div>\r\n                <button>save changes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm({form : \"edit-profile\"})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import React , {useState} from 'react'\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../preloader/preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport usePhoto from \"../../../assets/images/haha.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    let [editMode , setEditMode] = useState( false);\r\n\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    };\r\n    const onMainPhotoSelected = (e) => {\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n    const onSubmit = (formData) => {\r\n         props.saveProfile(formData).then(\r\n             ()=>{\r\n                 setEditMode(false);\r\n             }\r\n         )\r\n    };\r\n        return(\r\n            <div>\r\n                <div className={s.descriptionBlock}>\r\n                    <div>\r\n                        <div>\r\n                            <img className={s.profilePhoto} alt=\"\" src={props.profile.photos.large || usePhoto}/>\r\n                        </div>\r\n                        <div className={s.changeAvatar}>\r\n                            {props.isOwner && <input onChange={onMainPhotoSelected} type=\"file\"/> }\r\n                            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.profileInfo}>\r\n                        {editMode ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit}\r\n                         profile={props.profile }/> : <ProfileData isOwner={props.isOwner}\r\n                         goToEditMode={ ()=> {setEditMode(true)}} profile={props.profile }/> }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n}\r\nconst ProfileData = ({profile, goToEditMode , isOwner}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b> Full Name :</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b> About me :</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>LookingForAJob : </b> {profile.lookingForAJob?\"Yes\":\"No\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b> My Professional skills :</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Contacts :</b> {Object.keys(profile.contacts).map( key=>{\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            }) }\r\n            </div>\r\n            {isOwner &&  <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div> }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle} :</b> {contactValue}\r\n    </div>\r\n};\r\nexport default ProfileInfo;\r\n","import React from 'react'\r\nimport s from \"./Post.module.css\"\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt=\"\" className={s.post_img} src=\"https://www.vhv.rs/dpng/d/403-4039766_circle-star-circle-star-icon-png-transparent-png.png\" />\r\n            { props.message }\r\n            <div>\r\n                <span><img className={s.like} src=\"https://cdn2.iconfinder.com/data/icons/facebook-ui-colored/48/JD-22-512.png\" alt=\"\"/>{ props.like }</span>\r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utillits/validators/validators\";\r\nimport {Textarea} from \"../../FormControls/FormControls\";\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(50);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id } message={p.message} like={p.likesCount}/>);\r\n\r\n\r\n    let addPost = (values) => {\r\n        props.addPost(values.newPostBody);\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <AddMessageReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>)\r\n});\r\n\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} validate={[required,maxLength10]} name=\"newPostBody\" placeholder=\"new Post\"/>\r\n            <button className={s.formBtn}>add Post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({form : \"addPostForm\"})(AddMessageForm);\r\nexport default MyPosts;","\r\nimport {addPostActionCreator} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state)=>{\r\n    return {\r\n        posts : state.profilePage.posts,\r\n        newPostText : state.profilePage.newPostText\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost : (newPostBody)=>{\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React from 'react'\r\nimport s from \"./Profile.module.css\"\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return(\r\n        <div className={s.mainProfile} >\r\n            <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} savePhoto={props.savePhoto} status={props.status} updateUserStatus={props.updateUserStatus} profile={props.profile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserStatus, savePhoto, saveProfile, setUserProfile, updateUserStatus} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId){\r\n            userId = this.props.ownUserId;\r\n            if(!userId){\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        console.log(userId);\r\n        this.props.setUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props} profile={this.props.profile}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        status={this.props.status} savePhoto={this.props.savePhoto}\r\n                        updateUserStatus={this.props.updateUserStatus}/>\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile : state.profilePage.profile,\r\n    status : state.profilePage.status,\r\n    ownUserId : state.auth.id,\r\n    isAuth : state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {setUserProfile , saveProfile, getUserStatus, updateUserStatus, savePhoto }),\r\n    withRouter\r\n)(ProfileContainer) ;"," import React from 'react'\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core/\";\r\n\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n    <header className={s.header}>\r\n        <div className={s.left}>\r\n            <h5>SPACE Social Network</h5>\r\n        </div>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ?\r\n                <div className={props.isAuth ? s.logout : s.login}>{props.login} - <Button variant=\"outlined\" color=\"primary\" href=\"#outlined-buttons\" onClick={props.logout}>Log out</Button> </div>\r\n                : <NavLink to={'/login'}><Button variant=\"outlined\" color=\"primary\">Login</Button></NavLink> }\r\n        </div>\r\n\r\n    </header>)\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUsersData, logout} from \"../../Redux/authReducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n       this.props.getAuthUsersData();\r\n    }\r\n    render() {\r\n\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth : state.auth.isAuth,\r\n    login : state.auth.login\r\n\r\n});\r\nexport default connect(mapStateToProps , {logout,getAuthUsersData\r\n})(HeaderContainer);","import React from \"react\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../FormControls/FormControls\";\r\nimport {required} from \"../../utillits/validators/validators\";\r\nimport styles from \"../FormControls/FormControls.module.css\"\r\n\r\nconst FormLogin = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={`email`} placeholder={\"Email\"} type={\"text\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={`password`} placeholder={\"Password\"} type={\"password\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={`rememberMe`} type={\"checkbox\"} component={Input}/>Remember me\r\n                {props.captchaURL && <img src={props.captchaURL}/>}\r\n                {props.captchaURL && createField(\"symbols from image\", \"captcha\", [required], Input, {})}\r\n                {props.error&&<div className={styles.formSummaryError}>\r\n                    {props.error}\r\n                </div>}\r\n\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm({form : \"Login\"})(FormLogin);","import React from \"react\"\r\nimport  {LoginReduxForm} from \"./FormLogin\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/authReducer\";\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email,formData.password,formData.rememberMe,formData.captcha);\r\n\r\n    };\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return(\r\n\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaURL={props.captchaURL} />\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    isAuth : state.auth.isAuth,\r\n    captchaURL: state.auth.captchaURL\r\n});\r\nexport default  connect(mapStateToProps, {login} )(Login);","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Login from \"./Login\";\r\nimport {login} from \"../../Redux/authReducer\";\r\n\r\nconst LoginContainer  = (props)=>{\r\n\r\n        return <Login login={props.login}/>;\r\n};\r\nlet mapStateToProps = (state)=>({\r\n    login : state.auth.login\r\n});\r\nexport default connect(mapStateToProps,{login})(LoginContainer);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./Redux/appReducer\";\r\nimport Preloader from \"./components/preloader/preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\n\r\nconst DialogsContainer = React.lazy(()=> import(`./components/Dialogs/DialogsContainer`));\r\nclass App extends React.Component {\r\n    catchAllUnhandledError(promiseRejectionEvent){\r\n        alert(\"some error catch\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledError);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledError);\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar state={this.props.state}\r\n                        dispatch={this.props.dispatch}/>\r\n\r\n                <div className=\"app-wrapper-content\">\r\n                    <Switch>\r\n                    <Route exact path=\"/\"\r\n                               render={() => <Redirect to={\"/profile\"}/>}/>\r\n                    <Route path=\"/dialogs\"\r\n                           render={withSuspense(DialogsContainer) }/>\r\n                    <Route path=\"/profile/:userId?\"\r\n                           render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/users\"\r\n                           render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\"\r\n                           render={() => <LoginContainer/>}/>\r\n                    <Route path=\"*\"\r\n                           render={() => <div>404 NOT FOUND</div>}/>\r\n                    </Switch>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    initialized : state.app.initialized\r\n});\r\n\r\nexport default connect(mapStateToProps , {initializeApp })(App);\r\n","import React from \"react\";\r\nimport Preloader from \"../components/preloader/preloader\";\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) =>{\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    }\r\n};","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./Redux/redux-store\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(\r\n\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n       , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1r69B\",\"profilePhoto\":\"ProfileInfo_profilePhoto__Y3yjw\",\"profileInfo\":\"ProfileInfo_profileInfo__CI6gL\",\"contact\":\"ProfileInfo_contact__2I1l5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__10lsR\",\"item\":\"Navbar_item__3xH-R\",\"active\":\"Navbar_active__2iq8d\"};","export const required = value =>{\r\n    if(value)return undefined;\r\n    return \"Field is required\";\r\n};\r\nexport const maxLengthCreator = (MaxLength) => (value)=>{\r\n    if(value.length>MaxLength) return `max length is ${MaxLength} symbols`;\r\n    return undefined;\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formController\":\"FormControls_formController__2nejx\",\"formSummaryError\":\"FormControls_formSummaryError__1EQe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1PU1-\",\"ownerName\":\"Header_ownerName__QvTXR\",\"logout\":\"Header_logout__38R4Q\",\"loginBlock\":\"Header_loginBlock__RpTea\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3H1jN\",\"posts\":\"MyPosts_posts__rGfw3\",\"formBtn\":\"MyPosts_formBtn__3G5KS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__26OKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"users_photo__AIauk\",\"selectedPAge\":\"users_selectedPAge__EfTYy\"};"],"sourceRoot":""}