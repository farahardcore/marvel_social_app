{"version":3,"sources":["components/Navbar/Friends/Friends.module.css","assets/images/images.jfif","assets/images/Pulse-1s-200px.svg","components/Navbar/Navbar.module.css","serviceWorker.js","DAL/api.js","Redux/profileReducer.js","components/Navbar/Friends/Friends.jsx","Redux/sitebarReducer.js","Redux/usersReducer.js","Redux/authReducer.js","Redux/appReducer.js","Redux/redux-store.js","components/Navbar/Navbar.jsx","components/Users/Users.js","components/preloader/preloader.jsx","Redux/usersSelectors.js","components/Users/UsersContainer.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/FormLogin.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx","App.js","hoc/withSuspense.js","index.js","utillits/validators/validators.js","components/FormControls/FormControls.jsx","components/FormControls/FormControls.module.css","components/Users/users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","Redux/dialogsReducer.js"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","resultCode","delete","profileAPI","status","put","loginAPI","email","password","rememberMe","initialState","posts","id","message","likesCount","newPostText","profile","setUserProfileSuccess","type","setStatus","profileReducer","state","action","newPost","newPostBody","filter","p","postId","Friends","props","className","s","friends","alt","src","sidebarReducer","map","f","users","totalUsersCount","isFetching","followingInProgress","followingProgress","setCurrentPageSuccess","setToggleIsFetching","usersReducer","user","userID","followed","count","isAuth","login","authReducer","payload","setAuthUsersData","getAuthUsersData","dispatch","a","initialized","appReducer","reducers","combineReducers","dialogsPage","dialogsReducer","profilePage","sidebar","usersPage","auth","app","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","__store__","Navbar","nav","item","activeClassName","active","to","Users","pages","i","push","selectedPAge","onClick","e","onPageChanged","key","photos","small","userPhoto","photo","disabled","some","unfollow","follow","name","Preloader","preloader","getUsers","createSelector","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","setUsers","this","totalUsersCOunt","totalUserCount","unFollow","React","Component","connect","items","totalCount","ProfileStatusWithHooks","console","log","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","avatar","descriptionBlock","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Post","post_img","like","maxLength10","maxLengthCreator","MyPosts","memo","postsElements","postsBlock","AddMessageReduxForm","onSubmit","values","addPost","reduxForm","handleSubmit","Field","component","Textarea","validate","required","placeholder","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","params","history","setUserProfile","getUserStatus","ownUserId","withRouter","Header","header","loginBlock","HeaderContainer","alert","logout","LoginReduxForm","Input","error","styles","formSummaryError","Login","formData","errorMessage","messages","length","stopSubmit","_error","DialogsContainer","lazy","App","initializeApp","path","render","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","MaxLength","FormConrol","input","meta","child","hasError","touched","formController","children","restProps","inititalState","dialogs","addNewMessageBodyActionCreator","newMessageBody","newMessage"],"mappings":"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","file":"static/js/main.e82e22d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__1n_fF\"};","module.exports = __webpack_public_path__ + \"static/media/images.904467c3.jfif\";","module.exports = __webpack_public_path__ + \"static/media/Pulse-1s-200px.cf5df366.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__10lsR\",\"item\":\"Navbar_item__3xH-R\",\"active\":\"Navbar_active__2iq8d\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as axios from \"axios\";\r\n\r\nconst instance =  axios.create({\r\n    withCredentials : true,\r\n    baseURL : (\"https://social-network.samuraijs.com/api/1.0/\"),\r\n    headers : {\r\n        \"API-KEY\":\"24afe4d5-e911-48f2-ab38-6aea088744f2\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage,pageSize){\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n               return response.data;\r\n            });\r\n    },\r\n    setFollow(userId){\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data.resultCode;\r\n            })\r\n    },\r\n    setUnfollow(userId){\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data.resultCode;\r\n            })\r\n    }\r\n};\r\nexport const profileAPI = {\r\n    getUserProfile(userId){\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response=> {\r\n                return response.data;\r\n            })\r\n    },\r\n    getStatus(userId){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status){\r\n        return instance.put(`profile/status`, {status : status})\r\n    }\r\n}\r\nexport const loginAPI = {\r\n    me(){\r\n        debugger;\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe=false){\r\n        debugger;\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout(){\r\n        debugger;\r\n        return instance.delete(`auth/login`)\r\n    }\r\n};","import {profileAPI} from \"../DAL/api\";\r\n\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\n\r\nlet initialState = {\r\n    posts : [\r\n        // {id: 1 , message : \"Hi\" , likesCount : 12},\r\n        // {id: 2 , message : \"Hello\" , likesCount : 14},\r\n        // {id: 3 , message : \"It's my first post!\" , likesCount : 15},\r\n        // {id: 4 , message : \"What do you doing?\" , likesCount : 13},\r\n        {id: 5 , message : \"How much is the fish?\" , likesCount : 11}\r\n    ],\r\n    newPostText : \"heyhey\",\r\n    profile : null,\r\n    status : \"\"\r\n};\r\n\r\nconst  profileReducer = (state = initialState,action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 7,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return{\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile : action.profile\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status : action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, posts : state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const  deletePost = (postId) => ({type : DELETE_POST, postId});\r\nexport const addPostActionCreator = (newPostBody) => ({type : ADD_POST, newPostBody});\r\nconst setUserProfileSuccess = (profile)=> ({type : SET_USER_PROFILE, profile});\r\nconst setStatus = (status) => ({type : SET_STATUS,status});\r\nexport const getUserStatus = (userId) => async (dispatch) =>{\r\n    let response = await profileAPI.getStatus(userId);\r\n            debugger\r\n            dispatch(setStatus(response.data));\r\n};\r\nexport const updateUserStatus = (status) => async (dispatch) =>{\r\n    let response = await profileAPI.updateStatus(status);\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setStatus(status));\r\n            }\r\n};\r\nexport const setUserProfile = (userId) => async (dispatch) => {\r\n    let profile = await profileAPI.getUserProfile(userId);\r\n            dispatch(setUserProfileSuccess(profile));\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n","import React from \"react\"\r\nimport s from \"./Friends.module.css\"\r\nconst Friends = (props) => {\r\n    return <div className={s.friends}>\r\n        <img alt=\"\" src={props.src} />\r\n        </div>\r\n\r\n\r\n}\r\n\r\nexport default Friends","import Friends from \"../components/Navbar/Friends/Friends\";\r\nimport React from \"react\";\r\n\r\nlet initialState ={\r\n    friends : [\r\n        {id : 1 , src : \"https://cdn.iconscout.com/icon/premium/png-256-thumb/marvel-1502922-1273137.png\"},\r\n        {id : 1 , src : \"https://66.media.tumblr.com/2baea900172949be0a2c460cfe48fff8/tumblr_p9d3rzjswE1wmrvkdo7_250.png\"},\r\n        {id : 1 , src : \"https://66.media.tumblr.com/b6fdaeba44abe187c44e7b07fc896cbf/tumblr_p9d3rzjswE1wmrvkdo2_r1_250.png\"}\r\n    ]\r\n};\r\nconst FRIENDS_LIST = \"FRIENDS_LIST\";\r\nconst  sidebarReducer = (state = initialState ,action) => {\r\n    switch (action.type) {\r\n        case FRIENDS_LIST:\r\n            state.friends.map(f => <Friends src={f.src}/>);\r\n            return state;\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const friendsListActionCreator = () => ({type : FRIENDS_LIST});\r\n\r\nexport default  sidebarReducer;","import {usersAPI} from \"../DAL/api\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_USERS_TOTAL_COUNT = \"SET_USERS_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING = \"TOGGLE_IS_FOLLOWING\";\r\n\r\nlet initialState = {\r\n    users : [],\r\n    pageSize : 5,\r\n    totalUsersCount : 0,\r\n    currentPage : 1,\r\n    isFetching : true,\r\n    followingInProgress : []\r\n};\r\n\r\nconst  usersReducer = (state = initialState,action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {...state,\r\n                users: state.users.map(user=>{\r\n                    if(user.id === action.userID){\r\n                        return {\r\n                            ...user, followed : true\r\n                    }\r\n                    }\r\n                    return user;\r\n                } )};\r\n\r\n        case UNFOLLOW:\r\n            return {...state,\r\n                    users: state.users.map(user=>{\r\n                        if(user.id === action.userID){\r\n                            return {\r\n                                ...user, followed : false\r\n                            }\r\n                        }\r\n                        return user;\r\n                    } )};\r\n        case SET_USERS:\r\n            return {...state, users : action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.count};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n        case TOGGLE_IS_FOLLOWING:\r\n            return {...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress , action.userId]\r\n                    : state.followingInProgress.filter(id=>id !== action.userId)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst followingProgress = (isFetching, userId) => ({type:TOGGLE_IS_FOLLOWING, isFetching, userId});\r\nconst followSuccess = (userID) => ({type : FOLLOW,  userID});\r\nconst unFollowSuccess = (userID) => ({type : UNFOLLOW, userID});\r\nconst setUsersSuccess = (users) => ({type : SET_USERS , users});\r\nconst setCurrentPageSuccess = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nconst setUsersTotalCount = (totalUsersCount) => ({type: SET_USERS_TOTAL_COUNT, count : totalUsersCount});\r\nconst setToggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const follow = (userId) => async (dispatch) => {\r\n    dispatch(followingProgress(true, userId));\r\n    let response = await usersAPI.setFollow(userId);\r\n            if(response===0) {\r\n                dispatch(followSuccess(userId));\r\n            }\r\n            dispatch(followingProgress(false, userId));\r\n};\r\nexport const unFollow = (userId) => async (dispatch) => {\r\n    dispatch(followingProgress(true, userId));\r\n    let response = await usersAPI.setUnfollow(userId);\r\n            if(response===0) {\r\n                dispatch(unFollowSuccess(userId));\r\n            }\r\n            dispatch(followingProgress(false, userId));\r\n};\r\nexport const setUsers =(currentPage, pageSize)=> async (dispatch) => {\r\n    dispatch(setToggleIsFetching(true));\r\n    debugger;\r\n    let data = await usersAPI.getUsers(currentPage , pageSize);\r\n            dispatch(setToggleIsFetching(false));\r\n            dispatch(setCurrentPageSuccess(currentPage));\r\n            dispatch(setUsersSuccess(data.items));\r\n            dispatch(setUsersTotalCount(data.totalCount));\r\n};\r\nexport default usersReducer;\r\n\r\n","\r\nimport {loginAPI} from \"../DAL/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USERS_DATA = \"SET_USERS_DATA\";\r\n\r\nlet initialState ={\r\n    isAuth: false,\r\n    id : null,\r\n    login : null,\r\n    email: null,\r\n};\r\nconst  authReducer = (state = initialState ,action) => {\r\n    switch (action.type) {\r\n        case SET_USERS_DATA:\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport default  authReducer;\r\nconst setAuthUsersData = (id, email, login, isAuth) => ({type : SET_USERS_DATA,payload: { id ,email ,login, isAuth}});\r\nexport const getAuthUsersData = () => async (dispatch) => {\r\n    debugger;\r\n    let response = await loginAPI.me();\r\n            debugger;\r\n            if(response.data.resultCode === 0){\r\n                let {id , email , login} = response.data.data;\r\n                dispatch(setAuthUsersData(id , email , login, true))\r\n            }\r\n};\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await loginAPI.login(email, password, rememberMe);\r\n            if(response.data.resultCode === 0){\r\n                dispatch(getAuthUsersData())\r\n\r\n            }else{\r\n                let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"check the correctness of the entered data\"\r\n                dispatch(stopSubmit(\"Login\", {_error : errorMessage }));\r\n            }\r\n};\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await loginAPI.logout();\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setAuthUsersData(null,null,null,false))\r\n            }\r\n\r\n};","\r\nimport {getAuthUsersData} from \"./authReducer\";\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\";\r\n\r\nlet initialState ={\r\n    initialized : false\r\n};\r\nconst  appReducer = (state = initialState ,action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport default  appReducer;\r\nconst initializedSuccess = () => ({type : SET_INITIALIZED });\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUsersData());\r\n    Promise.all([promise]).then( ()=>{\r\n            dispatch(initializedSuccess());\r\n    });\r\n};\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport sidebarReducer from \"./sitebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nlet reducers = combineReducers({\r\n    dialogsPage :  dialogsReducer,\r\n    profilePage: profileReducer ,\r\n    sidebar : sidebarReducer,\r\n    usersPage : usersReducer,\r\n    auth : authReducer,\r\n    app : appReducer,\r\n    form : formReducer\r\n\r\n});\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(thunk)));\r\nwindow.__store__  = store;\r\nexport default store;","import React from 'react'\r\nimport s from \"./Navbar.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = (props) => {\r\n    //Тут можно получить кастомых друзей\r\n\r\n\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/dialogs\">Dialogs</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/users\">Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/news\">News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/music\">Music</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.active} to=\"/settings\">Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\"\r\nimport userPhoto from \"../../assets/images/images.jfif\";\r\nimport s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Users(props) {\r\n    // let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= 20; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p && s.selectedPAge}\r\n                                 onClick={(e) => {\r\n                                     props.onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {props.users.map(user => <div key={user.id}>\r\n                <span>\r\n                    <NavLink to={`profile/`+user.id}>\r\n                        <div>\r\n                            <img alt=\"logo\" src={user.photos.small != null ? user.photos.small : userPhoto} className={s.photo}/>\r\n                        </div>\r\n                    </NavLink>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={props.followingInProgress.some(id=>id===user.id)} onClick={() => {\r\n                                props.unfollow(user.id)\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id=>id===user.id)} onClick={() => {\r\n                                props.follow(user.id);\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.city\"}</div>\r\n                        <div>{\"user.location.country\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>)\r\n}\r\n\r\nexport default Users;","import preloader from \"../../assets/images/Pulse-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div>\r\n        <img alt=\"\" src={preloader}/>\r\n    </div>\r\n}\r\nexport default Preloader;","import {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector (getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u=>true);\r\n});\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n};","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setUsers, unFollow, follow\r\n} from \"../../Redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/usersSelectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.setUsers(this.props.currentPage,this.props.pageSize);\r\n\r\n    };\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.setUsers(pageNumber, this.props.pageSize);\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCOunt={this.props.totalUserCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n// let authRedirectComponent = withAuthRedirect(UsersContainer);\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unFollow, setUsers\r\n    })\r\n)(UsersContainer);","import React , {useState, useEffect} from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    console.log(props);\r\n    let [editMode , setEditMode] = useState( false);\r\n    let [status , setStatus] = useState(props.status);\r\n    useEffect( ()=>{\r\n        setStatus(props.status);\r\n    },[props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    };\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return (\r\n            <div>\r\n                <div>\r\n                    {!editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode} >{props.status || `----`}  </span>\r\n                    </div>\r\n                    }\r\n                    {editMode &&\r\n                        <div>\r\n                            <input onChange={onStatusChange} autoFocus={true}\r\n                                   value={status} onBlur={deactivateEditMode}/>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react'\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../preloader/preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }else {\r\n        return(\r\n            <div>\r\n                <div className={s.avatar}>\r\n                    <img alt=\"hey\" src=\"https://esquire.kz/wp-content/uploads/2018/04/3367434-aiw_master-1-960x540.jpg\" />\r\n                </div>\r\n                <div className={s.descriptionBlock}>\r\n                    <img alt=\"hey\" src={props.profile.photos.large}/>\r\n                    <span>{props.profile.fullName}</span>\r\n                    <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                </div>\r\n                <div>\r\n                    <span>{props.profile.aboutMe}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{props.profile.lookingForAJob?\"Looking for a work\":\"Not looking a work\"}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{props.profile.lookingForAJobDescription}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react'\r\nimport s from \"./Post.module.css\"\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt=\"\" className={s.post_img} src=\"https://www.freeiconspng.com/uploads/shield-marvel-icon-5.jpg\" />\r\n            { props.message }\r\n            <div>\r\n                <span>Like: { props.like }</span>\r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utillits/validators/validators\";\r\nimport {Textarea} from \"../../FormControls/FormControls\";\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(50);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} like={p.likesCount}/>);\r\n\r\n\r\n    let addPost = (values) => {\r\n        props.addPost(values.newPostBody);\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <AddMessageReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>)\r\n});\r\n\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} validate={[required,maxLength10]} name=\"newPostBody\" placeholder=\"new Post\"/>\r\n            <button>add Post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({form : \"addPostForm\"})(AddMessageForm);\r\nexport default MyPosts;","\r\nimport {addPostActionCreator} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state)=>{\r\n    return {\r\n        posts : state.profilePage.posts,\r\n        newPostText : state.profilePage.newPostText\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost : (newPostBody)=>{\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return(\r\n        <div >\r\n            <ProfileInfo status={props.status} updateUserStatus={props.updateUserStatus} profile={props.profile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserStatus, setUserProfile, updateUserStatus} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId){\r\n            userId = 5945;\r\n            if(!userId){\r\n                this.props.history.push(\"/login\");\r\n            }\r\n\r\n        }\r\n        this.props.setUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props} profile={this.props.profile}\r\n                        status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile : state.profilePage.profile,\r\n    status : state.profilePage.status,\r\n    ownUserId : state.auth.id,\r\n    isAuth : state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {setUserProfile , getUserStatus, updateUserStatus }),\r\n    withRouter\r\n)(ProfileContainer) ;"," import React from 'react'\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n\r\n    return <header className={s.header}>\r\n        <img alt=\"\" src=\"https://img2.freepng.es/20180331/aye/kisspng-iron-man-captain-america-logo-marvel-cinematic-uni-avengers-5abf62fa369331.0376927015224921542236.jpg\"></img>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ? props.login : <NavLink to={\"/login/\"}>Login</NavLink>}\r\n            {props.isAuth ? <button>Logout</button> : \"\"}\r\n\r\n\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../Redux/authReducer\";\r\nimport {loginAPI} from \"../../DAL/api\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n        if(this.props.isAuth){\r\n            alert(\"you are authorised\");\r\n        }else{\r\n            console.log(\"НЕ ВИДИТ ЧТО АВТОРИЗОВАН\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth : state.auth.isAuth,\r\n    login : state.auth.login\r\n\r\n});\r\nexport default connect(mapStateToProps , {logout })(HeaderContainer);","import React from \"react\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../FormControls/FormControls\";\r\nimport {required} from \"../../utillits/validators/validators\";\r\nimport styles from \"../FormControls/FormControls.module.css\"\r\n\r\nconst FormLogin = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={`email`} placeholder={\"Email\"} type={\"text\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={`password`} placeholder={\"Password\"} type={\"password\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={`rememberMe`} type={\"checkbox\"} component={\"input\"}/>Remember me\r\n                {props.error&&<div className={styles.formSummaryError}>\r\n                    {props.error}\r\n                </div>}\r\n\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm({form : \"Login\"})(FormLogin);","import React from \"react\"\r\nimport  {LoginReduxForm} from \"./FormLogin\";\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email,formData.password,formData.rememberMe);\r\n    };\r\n    return(\r\n\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\nexport default Login;","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Login from \"./Login\";\r\nimport {login} from \"../../Redux/authReducer\";\r\n\r\nconst LoginContainer  = (props)=>{\r\n\r\n        return <Login login={props.login}/>;\r\n};\r\nlet mapStateToProps = (state)=>({\r\n    login : state.auth.login\r\n});\r\nexport default connect(mapStateToProps,{login})(LoginContainer);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./Redux/appReducer\";\r\nimport Preloader from \"./components/preloader/preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\n\r\nconst DialogsContainer = React.lazy(()=> import(`./components/Dialogs/DialogsContainer`));\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar state={this.props.state}\r\n                        dispatch={this.props.dispatch}/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path=\"/dialogs\"\r\n                           render={withSuspense(DialogsContainer) }/>\r\n                    <Route path=\"/profile/:userId?\"\r\n                           render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/users\"\r\n                           render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\"\r\n                           render={() => <LoginContainer/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    initialized : state.app.initialized\r\n});\r\n\r\nexport default connect(mapStateToProps , {initializeApp })(App);\r\n","import React from \"react\";\r\nimport Preloader from \"../components/preloader/preloader\";\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) =>{\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    }\r\n};","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./Redux/redux-store\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();","export const required = value =>{\r\n    if(value)return undefined;\r\n    return \"Field is required\";\r\n};\r\nexport const maxLengthCreator = (MaxLength) => (value)=>{\r\n    if(value.length>MaxLength) return `max length is ${MaxLength} symbols`;\r\n    return undefined;\r\n\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\n\r\nconst FormConrol = ({input, meta , child, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={hasError ? styles.formController : \"\"}>\r\n            <div>\r\n                {props.children}\r\n\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta , child, ...restProps} = props;\r\n    return <FormConrol {...props}> <textarea {...input} {...restProps}/> </FormConrol>\r\n};\r\nexport const Input = (props) => {\r\n    const {input, meta , child, ...restProps} = props;\r\n    return <FormConrol {...props}> <input {...input} {...restProps}/> </FormConrol>\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formController\":\"FormControls_formController__2nejx\",\"formSummaryError\":\"FormControls_formSummaryError__1EQe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"users_photo__AIauk\",\"selectedPAge\":\"users_selectedPAge__EfTYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1r69B\",\"avatar\":\"ProfileInfo_avatar__1jmXn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3H1jN\",\"posts\":\"MyPosts_posts__rGfw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__26OKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1PU1-\",\"loginBlock\":\"Header_loginBlock__RpTea\"};","const ADD_NEW_MESSAGE_BODY = \"ADD_NEW_MESSAGE_BODY\";\r\nlet inititalState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Maksim\"},\r\n        {id: 2, name: \"Maks\"},\r\n        {id: 3, name: \"Masha\"},\r\n        {id: 4, name: \"Yo\"},\r\n        {id: 5, name: \"Egor\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"How are you?\"},\r\n        {id: 4, message: \"What are you doing?\"},\r\n        {id: 5, message: \"How much is the fish?\"}\r\n\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state = inititalState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_NEW_MESSAGE_BODY:\r\n            let newMessage = {\r\n                id: 7,\r\n                message: action.newMessageBody\r\n            };\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addNewMessageBodyActionCreator = (newMessageBody) => ({type: ADD_NEW_MESSAGE_BODY, newMessageBody});\r\n\r\nexport default dialogsReducer;\r\n"],"sourceRoot":""}