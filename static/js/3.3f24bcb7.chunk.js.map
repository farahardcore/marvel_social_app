{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/AuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialogs","active","to","id","name","Message","message","maxLengthForMessage","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","addNewMessageBodyActionCreator","Component","RedirectComponent","this","React"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8FCYnKC,EATI,SAACC,GAChB,OACI,yBAAKC,UAAS,UAAKC,IAAEC,QAAP,YAAkBD,IAAEE,SACtB,kBAAC,IAAD,CAASC,GAAE,mBAAcL,EAAMM,GAApB,MAA4BN,EAAMO,QCIlDC,EANC,SAACR,GACb,OAAO,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,yCC0BvCC,EAAsBC,YAAiB,KAUvCC,EAAsBC,YAAU,CAACC,KAAO,qBAAlBD,EATL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAWX,GAAsBH,KAAK,iBAAiBe,YAAY,gBAC1G,4CAOGC,EAlCC,SAACvB,GACb,IAAIwB,EAAQxB,EAAMyB,YACdC,EAAkBF,EAAMrB,QAAQwB,KAAK,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAAYC,IAAKD,EAAEtB,GAAIC,KAAMqB,EAAErB,KAAMD,GAAIsB,EAAEtB,QACtFwB,EAAmBN,EAAMO,SAASJ,KAAK,SAAAK,GAAC,OAAK,kBAAC,EAAD,CAASH,IAAKG,EAAE1B,GAAIG,QAASuB,EAAEvB,aAMhF,OAAIT,EAAMiC,OAEN,yBAAKhC,UAAWC,IAAEC,SACf,yBAAKF,UAAWC,IAAEgC,cACbR,GAEL,yBAAKzB,UAAWC,IAAE6B,UACZD,EACD,kBAAClB,EAAD,CAAqBG,SAXb,SAACoB,GACjBnC,EAAMoC,YAAYD,EAAOE,qBAEJ,kBAAC,IAAD,CAAUhC,GAAE,Y,wCChBrCiC,EAA6B,SAACd,GAAD,MAAY,CACzCS,OAAST,EAAMe,KAAKN,S,OCoBTO,sBACXC,aAhBkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACiB,GACtB,MAAO,CACHN,YAAc,SAACC,GACXK,EAASC,YAA+BN,UDZpB,SAACO,GAAe,IACtCC,EADqC,uKAGnC,OAAIC,KAAK9C,MAAMiC,OACR,kBAACW,EAAcE,KAAK9C,OADG,kBAAC,IAAD,CAAUK,GAAE,eAHP,GACX0C,IAAMH,WAQtC,OADiCH,YAAQH,EAARG,CAAoCI,KCU1DL,CAGbjB","file":"static/js/3.3f24bcb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2qK2X\",\"dialogsItems\":\"Dialogs_dialogsItems__1Rt0I\",\"active\":\"Dialogs_active__3DaEG\",\"messages\":\"Dialogs_messages__2wFJL\",\"message\":\"Dialogs_message__XTV-f\"};","import React from \"react\"\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={`${s.dialogs} ${s.active}`}>\r\n                    <NavLink to={`/dialogs/${props.id} `}>{props.name}</NavLink>\r\n               </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\"\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from \"react\"\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utillits/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map( d =>  <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map( m =>  <Message key={m.id} message={m.message}/> );\r\n    // let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values)=>{\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n    if(!props.isAuth) return <Redirect to={`/login`}/>;\r\n    return (\r\n        <div className={s.dialogs}>\r\n           <div className={s.dialogsItems}>\r\n               {dialogsElements}\r\n           </div>\r\n           <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n           </div>\r\n        </div>\r\n    )\r\n};\r\nconst maxLengthForMessage = maxLengthCreator(100);\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} validate={[required , maxLengthForMessage]} name=\"newMessageBody\" placeholder=\"new message\"/>\r\n            <button>SEND</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({form : \"dialogMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth : state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={`/login`}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return connectedRedirectComponent;\r\n};","\r\nimport {\r\n    addNewMessageBodyActionCreator,\r\n} from \"../../Redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage : (newMessageBody)=>{\r\n            dispatch(addNewMessageBodyActionCreator(newMessageBody));\r\n            debugger;\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}